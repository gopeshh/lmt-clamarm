/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2014-09-06 18:35:11.356654
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=IKcos(j[1]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((IkReal(1.00000000000000))*(x3));
x15=((IkReal(1.00000000000000))*(x2));
x16=((IkReal(0.0783000000000000))*(x3));
x17=((IkReal(0.0783000000000000))*(x11));
x18=((IkReal(0.248000000000000))*(x3));
x19=((IkReal(0.00800000000000000))*(x6));
x20=((IkReal(1.00000000000000))*(x11));
x21=((IkReal(1.00000000000000))*(x6));
x22=((IkReal(1.00000000000000))*(x10));
x23=((IkReal(0.0783000000000000))*(x2));
x24=((IkReal(0.248000000000000))*(x6));
x25=((IkReal(0.00800000000000000))*(x2));
x26=((x0)*(x7));
x27=((x0)*(x1));
x28=((x5)*(x7));
x29=((IkReal(-1.00000000000000))*(x9));
x30=((IkReal(-1.00000000000000))*(x2));
x31=((x4)*(x5));
x32=((x0)*(x4));
x33=((x1)*(x5));
x34=((IkReal(-1.00000000000000))*(x3));
x35=((x1)*(x4));
x36=((IkReal(-1.00000000000000))*(x11));
x37=((IkReal(-1.00000000000000))*(x8));
x38=((x15)*(x6));
x39=((x1)*(x10)*(x7));
x40=((x15)*(x33));
x41=((((x32)*(x6)))+(((IkReal(-1.00000000000000))*(x28))));
x42=((x31)+(((x26)*(x6))));
x43=((((IkReal(-1.00000000000000))*(x21)*(x28)))+(x32));
x44=((((x2)*(x35)))+(((x3)*(x6))));
x45=((((IkReal(-1.00000000000000))*(x14)*(x35)))+(x38));
x46=((((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x21)*(x31))));
x47=((x2)*(x41));
x48=((x10)*(x42));
x49=((x44)*(x8));
x50=((x3)*(x41));
x51=((x10)*(x43));
x52=((x3)*(x46));
x53=((x2)*(x46));
x54=((((x27)*(x34)))+(x47));
x55=((((x3)*(x33)))+(x53));
x56=((((x22)*(((((IkReal(-1.00000000000000))*(x3)*(x35)))+(x38)))))+(((IkReal(-1.00000000000000))*(x1)*(x20)*(x7))));
x57=((((x27)*(x30)))+(((x34)*(x41))));
x58=((((IkReal(-1.00000000000000))*(x20)*(x45)))+(((IkReal(-1.00000000000000))*(x1)*(x22)*(x7))));
x59=((x54)*(x8));
x60=((((x34)*(x46)))+(x40));
x61=((x11)*(x57));
x62=((x58)*(x9));
x63=((((IkReal(-1.00000000000000))*(x20)*(x42)))+(((x22)*(((((IkReal(-1.00000000000000))*(x2)*(x27)))+(((IkReal(-1.00000000000000))*(x50))))))));
x64=((((x11)*(x43)))+(((x10)*(((((IkReal(-1.00000000000000))*(x40)))+(x52))))));
x65=((((IkReal(-1.00000000000000))*(x48)))+(((x36)*(x57))));
x66=((((x36)*(x60)))+(((IkReal(-1.00000000000000))*(x51))));
x67=((x65)*(x9));
eerot[0]=((((x8)*(((x48)+(((x11)*(((((IkReal(-1.00000000000000))*(x15)*(x27)))+(((IkReal(-1.00000000000000))*(x14)*(x41)))))))))))+(((x54)*(x9))));
eerot[1]=((((x13)*(x63)))+(((x12)*(((x59)+(x67))))));
eerot[2]=((((x12)*(x63)))+(((x13)*(((((x29)*(x65)))+(((x37)*(x54))))))));
IkReal x68=((IkReal(1.00000000000000))*(x27));
eetrans[0]=((((x8)*(((((x17)*(x57)))+(((IkReal(0.0783000000000000))*(x48)))))))+(((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x68)))+(((x23)*(x41)))))))+(((x3)*(((((x19)*(x32)))+(((IkReal(-0.00800000000000000))*(x28)))))))+(((IkReal(-1.00000000000000))*(x18)*(x68)))+(((x25)*(x27)))+(((x2)*(((((IkReal(-0.248000000000000))*(x28)))+(((x24)*(x32)))))))+(((IkReal(-0.155000000000000))*(x27))));
eerot[3]=((((IkReal(-1.00000000000000))*(x8)*(((((x20)*(((((IkReal(-1.00000000000000))*(x14)*(x46)))+(x40)))))+(((x22)*(x43)))))))+(((x9)*(((((x30)*(x46)))+(((x33)*(x34))))))));
eerot[4]=((((x13)*(x64)))+(((x12)*(((((x29)*(x66)))+(((x37)*(x55))))))));
eerot[5]=((((x12)*(x64)))+(((x13)*(((((x55)*(x8)))+(((x66)*(x9))))))));
IkReal x69=((IkReal(1.00000000000000))*(x33));
eetrans[1]=((((x8)*(((((IkReal(-0.0783000000000000))*(x51)))+(((IkReal(-0.0783000000000000))*(x11)*(x60)))))))+(((IkReal(-0.155000000000000))*(x33)))+(((x2)*(((((IkReal(0.248000000000000))*(x26)))+(((x24)*(x31)))))))+(((x3)*(((((x19)*(x31)))+(((IkReal(0.00800000000000000))*(x26)))))))+(((IkReal(-1.00000000000000))*(x18)*(x69)))+(((x25)*(x33)))+(((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x69)))+(((IkReal(-1.00000000000000))*(x23)*(x46))))))));
eerot[6]=((((x8)*(((((x11)*(x45)))+(x39)))))+(((x44)*(x9))));
eerot[7]=((((x13)*(x56)))+(((x12)*(((x49)+(x62))))));
eerot[8]=((((x12)*(x56)))+(((x13)*(((((IkReal(-1.00000000000000))*(x49)))+(((IkReal(-1.00000000000000))*(x62))))))));
eetrans[2]=((IkReal(0.0910000000000000))+(((x18)*(x6)))+(((IkReal(0.248000000000000))*(x2)*(x35)))+(((IkReal(0.155000000000000))*(x6)))+(((x8)*(((((x17)*(x45)))+(((IkReal(0.0783000000000000))*(x39)))))))+(((IkReal(-1.00000000000000))*(x19)*(x2)))+(((IkReal(0.00800000000000000))*(x3)*(x35)))+(((x9)*(((((x23)*(x35)))+(((x16)*(x6))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r12;
new_r01=((IkReal(-1.00000000000000))*(r11));
new_r02=((IkReal(-1.00000000000000))*(r10));
new_px=((((IkReal(0.0783000000000000))*(r10)))+(((IkReal(-1.00000000000000))*(py))));
new_r10=((IkReal(-1.00000000000000))*(r02));
new_r11=r01;
new_r12=r00;
new_py=((((IkReal(-0.0783000000000000))*(r00)))+(px));
new_r20=((IkReal(-1.00000000000000))*(r22));
new_r21=r21;
new_r22=r20;
new_pz=((IkReal(-0.0910000000000000))+(((IkReal(-0.0783000000000000))*(r20)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(-1.11275366059675))+(((IkReal(13.0005217786121))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.11275366059675))+(((IkReal(13.0005217786121))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x70=IKasin(((IkReal(-1.11275366059675))+(((IkReal(13.0005217786121))*(pp)))));
j3array[0]=((IkReal(-1.60304320923015))+(((IkReal(1.00000000000000))*(x70))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.53854944435964))+(((IkReal(-1.00000000000000))*(x70))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x71=(cj2)*(cj2);
IkReal x72=(cj3)*(cj3);
IkReal x73=(sj3)*(sj3);
IkReal x74=((IkReal(62.0000000000000))*(cj3)*(sj3));
dummyeval[0]=((IkReal(375.390625000000))+(((IkReal(-1.00000000000000))*(x74)))+(((IkReal(1201.25000000000))*(cj3)))+(x73)+(((IkReal(961.000000000000))*(x72)))+(((IkReal(961.000000000000))*(x71)*(x73)))+(((IkReal(-38.7500000000000))*(sj3)))+(((x71)*(x72)))+(((x71)*(x74))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x75=((IkReal(0.155000000000000))+(((IkReal(-0.00800000000000000))*(sj3)))+(((IkReal(0.248000000000000))*(cj3))));
IkReal x76=((((IkReal(0.248000000000000))*(cj2)*(sj3)))+(((IkReal(0.00800000000000000))*(cj2)*(cj3))));
if( IKabs(x75) < IKFAST_ATAN2_MAGTHRESH && IKabs(x76) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x77=((IkReal(1.00000000000000))*(IKatan2(x75, x76)));
if( ((((x75)*(x75))+((x76)*(x76)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x78=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x77)))+(x78));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x78))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x79=((IkReal(31.0000000000000))*(sj1));
gconst0=IKsign(((((x79)*((px)*(px))))+(((x79)*((py)*(py))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x80=((IkReal(1.00000000000000))*(pp));
IkReal x81=((IkReal(0.155000000000000))+(((IkReal(-0.00800000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.248000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x80))));
evalcond[2]=((IkReal(0.0375430000000000))+(((IkReal(0.310000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x80))));
evalcond[3]=x81;
evalcond[4]=x81;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((cj2)*((py)*(py))))+(((cj2)*((px)*(px))))));
dummyeval[0]=((((cj2)*((py)*(py))))+(((cj2)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x82=((IkReal(1.00000000000000))*(pp));
IkReal x83=x81;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x82))));
evalcond[2]=((IkReal(0.0375430000000000))+(((IkReal(0.310000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x82))));
evalcond[3]=x83;
evalcond[4]=x83;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x84=((IkReal(0.00800000000000000))*(cj3));
IkReal x85=((IkReal(0.248000000000000))*(sj3));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(py)*(x84)))+(((IkReal(-1.00000000000000))*(py)*(x85))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(px)*(x85)))+(((IkReal(-1.00000000000000))*(px)*(x84))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(py)*(x84)))+(((IkReal(-1.00000000000000))*(py)*(x85)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(px)*(x85)))+(((IkReal(-1.00000000000000))*(px)*(x84)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x86=IKcos(j0);
IkReal x87=IKsin(j0);
IkReal x88=((IkReal(1.00000000000000))*(px));
evalcond[0]=((((IkReal(-0.00800000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x87)))+(((IkReal(-1.00000000000000))*(x86)*(x88)))+(((IkReal(-0.248000000000000))*(sj3))));
evalcond[1]=((((py)*(x86)))+(((IkReal(-1.00000000000000))*(x87)*(x88))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x233=((IkReal(1.00000000000000))*(pp));
IkReal x234=x81;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x233))));
evalcond[2]=((IkReal(0.0375430000000000))+(((IkReal(-1.00000000000000))*(x233)))+(((IkReal(0.310000000000000))*(pz))));
evalcond[3]=x234;
evalcond[4]=x234;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x235=((IkReal(0.00800000000000000))*(cj3));
IkReal x236=((IkReal(0.248000000000000))*(sj3));
if( IKabs(((gconst5)*(((((py)*(x235)))+(((py)*(x236))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((px)*(x236)))+(((px)*(x235))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((py)*(x235)))+(((py)*(x236)))))), ((gconst5)*(((((px)*(x236)))+(((px)*(x235)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x237=IKsin(j0);
IkReal x238=IKcos(j0);
IkReal x239=((IkReal(1.00000000000000))*(x238));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x237)))+(((IkReal(-1.00000000000000))*(px)*(x239)))+(((IkReal(0.248000000000000))*(sj3)))+(((IkReal(0.00800000000000000))*(cj3))));
evalcond[1]=((((px)*(x237)))+(((IkReal(-1.00000000000000))*(py)*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x240=(cj2)*(cj2);
IkReal x241=((cj2)*(sj2));
IkReal x242=((IkReal(0.00800000000000000))*(cj3));
IkReal x243=((IkReal(0.248000000000000))*(sj3));
IkReal x244=((px)*(x243));
IkReal x245=((py)*(x240));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x240)*(x242)))+(((IkReal(-1.00000000000000))*(x240)*(x244)))+(((IkReal(-1.00000000000000))*(py)*(x241)*(x242)))+(((IkReal(-1.00000000000000))*(py)*(x241)*(x243))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x241)*(x242)))+(((IkReal(-1.00000000000000))*(x241)*(x244)))+(((x242)*(x245)))+(((x243)*(x245))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x240)*(x242)))+(((IkReal(-1.00000000000000))*(x240)*(x244)))+(((IkReal(-1.00000000000000))*(py)*(x241)*(x242)))+(((IkReal(-1.00000000000000))*(py)*(x241)*(x243)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x241)*(x242)))+(((IkReal(-1.00000000000000))*(x241)*(x244)))+(((x242)*(x245)))+(((x243)*(x245)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x246=IKsin(j0);
IkReal x247=IKcos(j0);
IkReal x248=((px)*(sj2));
IkReal x249=((IkReal(0.248000000000000))*(sj3));
IkReal x250=((cj2)*(px));
IkReal x251=((IkReal(0.00800000000000000))*(cj3));
IkReal x252=((IkReal(1.00000000000000))*(x247));
IkReal x253=((py)*(x246));
IkReal x254=((py)*(x247));
IkReal x255=((IkReal(1.00000000000000))*(x246));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x249)))+(((IkReal(-1.00000000000000))*(sj2)*(x251)))+(((IkReal(-1.00000000000000))*(px)*(x252)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[1]=((((cj2)*(x253)))+(((IkReal(-1.00000000000000))*(x248)*(x255)))+(((sj2)*(x254)))+(((x247)*(x250))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x249)))+(x254)+(((IkReal(-1.00000000000000))*(cj2)*(x251)))+(((IkReal(-1.00000000000000))*(px)*(x255))));
evalcond[3]=((((x246)*(x250)))+(x251)+(x249)+(((sj2)*(x253)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x252)))+(((x247)*(x248))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x256=((IkReal(0.248000000000000))*(sj3));
IkReal x257=((px)*(sj2));
IkReal x258=((IkReal(0.00800000000000000))*(cj3));
IkReal x259=((cj2)*(px));
IkReal x260=((py)*(x258));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(sj2)*(x260)))+(((IkReal(-1.00000000000000))*(x256)*(x259)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x256)))+(((IkReal(-1.00000000000000))*(x258)*(x259))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj2)*(py)*(x256)))+(((IkReal(-1.00000000000000))*(x256)*(x257)))+(((IkReal(-1.00000000000000))*(x257)*(x258)))+(((cj2)*(x260))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(sj2)*(x260)))+(((IkReal(-1.00000000000000))*(x256)*(x259)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x256)))+(((IkReal(-1.00000000000000))*(x258)*(x259)))))), ((gconst2)*(((((cj2)*(py)*(x256)))+(((IkReal(-1.00000000000000))*(x256)*(x257)))+(((IkReal(-1.00000000000000))*(x257)*(x258)))+(((cj2)*(x260)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x261=IKsin(j0);
IkReal x262=IKcos(j0);
IkReal x263=((px)*(sj2));
IkReal x264=((IkReal(0.248000000000000))*(sj3));
IkReal x265=((cj2)*(px));
IkReal x266=((IkReal(0.00800000000000000))*(cj3));
IkReal x267=((IkReal(1.00000000000000))*(x262));
IkReal x268=((py)*(x261));
IkReal x269=((py)*(x262));
IkReal x270=((IkReal(1.00000000000000))*(x261));
evalcond[0]=((((IkReal(-1.00000000000000))*(x268)))+(((IkReal(-1.00000000000000))*(sj2)*(x266)))+(((IkReal(-1.00000000000000))*(sj2)*(x264)))+(((IkReal(-1.00000000000000))*(px)*(x267))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x263)*(x270)))+(((sj2)*(x269)))+(((x262)*(x265)))+(((cj2)*(x268))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x266)))+(((IkReal(-1.00000000000000))*(cj2)*(x264)))+(x269)+(((IkReal(-1.00000000000000))*(px)*(x270))));
evalcond[3]=((((sj2)*(x268)))+(((x262)*(x263)))+(x264)+(x266)+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x267)))+(((x261)*(x265))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x271=((IkReal(1.00000000000000))*(pp));
IkReal x272=((IkReal(0.00800000000000000))*(sj3));
IkReal x273=((IkReal(0.248000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x271))));
evalcond[2]=((IkReal(0.0375430000000000))+(((IkReal(-0.310000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x271))));
evalcond[3]=((IkReal(0.155000000000000))+(x273)+(pz)+(((IkReal(-1.00000000000000))*(x272))));
evalcond[4]=((IkReal(-0.155000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x272)+(((IkReal(-1.00000000000000))*(x273))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((cj2)*((py)*(py))))+(((cj2)*((px)*(px))))));
dummyeval[0]=((((cj2)*((py)*(py))))+(((cj2)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x274=((IkReal(1.00000000000000))*(pp));
IkReal x275=((IkReal(0.00800000000000000))*(sj3));
IkReal x276=((IkReal(0.248000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x274))));
evalcond[2]=((IkReal(0.0375430000000000))+(((IkReal(-0.310000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x274))));
evalcond[3]=((IkReal(0.155000000000000))+(x276)+(pz)+(((IkReal(-1.00000000000000))*(x275))));
evalcond[4]=((IkReal(-0.155000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x275)+(((IkReal(-1.00000000000000))*(x276))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x277=((IkReal(0.00800000000000000))*(cj3));
IkReal x278=((IkReal(0.248000000000000))*(sj3));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(py)*(x277)))+(((IkReal(-1.00000000000000))*(py)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x277)))+(((IkReal(-1.00000000000000))*(px)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(py)*(x277)))+(((IkReal(-1.00000000000000))*(py)*(x278)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(px)*(x277)))+(((IkReal(-1.00000000000000))*(px)*(x278)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x279=IKsin(j0);
IkReal x280=IKcos(j0);
IkReal x281=((IkReal(1.00000000000000))*(x280));
evalcond[0]=((((IkReal(-0.00800000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x279)))+(((IkReal(-1.00000000000000))*(px)*(x281)))+(((IkReal(-0.248000000000000))*(sj3))));
evalcond[1]=((((px)*(x279)))+(((IkReal(-1.00000000000000))*(py)*(x281))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x282=((IkReal(1.00000000000000))*(pp));
IkReal x283=((IkReal(0.00800000000000000))*(sj3));
IkReal x284=((IkReal(0.248000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x282))));
evalcond[2]=((IkReal(0.0375430000000000))+(((IkReal(-0.310000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x282))));
evalcond[3]=((IkReal(0.155000000000000))+(x284)+(pz)+(((IkReal(-1.00000000000000))*(x283))));
evalcond[4]=((IkReal(-0.155000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x283)+(((IkReal(-1.00000000000000))*(x284))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x285=((IkReal(0.248000000000000))*(sj3));
IkReal x286=((IkReal(0.00800000000000000))*(cj3));
if( IKabs(((gconst9)*(((((py)*(x285)))+(((py)*(x286))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((px)*(x285)))+(((px)*(x286))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst9)*(((((py)*(x285)))+(((py)*(x286)))))), ((gconst9)*(((((px)*(x285)))+(((px)*(x286)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x287=IKcos(j0);
IkReal x288=IKsin(j0);
IkReal x289=((IkReal(1.00000000000000))*(px));
evalcond[0]=((((IkReal(-1.00000000000000))*(x287)*(x289)))+(((IkReal(-1.00000000000000))*(py)*(x288)))+(((IkReal(0.248000000000000))*(sj3)))+(((IkReal(0.00800000000000000))*(cj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x288)*(x289)))+(((py)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x290=(cj2)*(cj2);
IkReal x291=((cj2)*(sj2));
IkReal x292=((IkReal(0.00800000000000000))*(cj3));
IkReal x293=((IkReal(0.248000000000000))*(sj3));
IkReal x294=((px)*(x293));
IkReal x295=((py)*(x290));
if( IKabs(((gconst7)*(((((x290)*(x294)))+(((px)*(x290)*(x292)))+(((IkReal(-1.00000000000000))*(py)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(py)*(x291)*(x293))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(x291)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x293)*(x295)))+(((IkReal(-1.00000000000000))*(x292)*(x295))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((x290)*(x294)))+(((px)*(x290)*(x292)))+(((IkReal(-1.00000000000000))*(py)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(py)*(x291)*(x293)))))), ((gconst7)*(((((IkReal(-1.00000000000000))*(x291)*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x293)*(x295)))+(((IkReal(-1.00000000000000))*(x292)*(x295)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x296=IKsin(j0);
IkReal x297=IKcos(j0);
IkReal x298=((py)*(sj2));
IkReal x299=((px)*(sj2));
IkReal x300=((IkReal(0.248000000000000))*(sj3));
IkReal x301=((IkReal(0.00800000000000000))*(cj3));
IkReal x302=((IkReal(1.00000000000000))*(x297));
IkReal x303=((py)*(x296));
IkReal x304=((py)*(x297));
IkReal x305=((IkReal(1.00000000000000))*(px)*(x296));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x300)))+(((IkReal(-1.00000000000000))*(sj2)*(x301)))+(((IkReal(-1.00000000000000))*(px)*(x302)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x298)*(x302)))+(((cj2)*(x303)))+(((cj2)*(px)*(x297)))+(((x296)*(x299))));
evalcond[2]=((((cj2)*(x300)))+(((cj2)*(x301)))+(x304)+(((IkReal(-1.00000000000000))*(x305))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x305)))+(((cj2)*(x304)))+(x300)+(x301)+(((x297)*(x299)))+(((x296)*(x298))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x306=((IkReal(0.248000000000000))*(sj3));
IkReal x307=((px)*(sj2));
IkReal x308=((IkReal(0.00800000000000000))*(cj3));
IkReal x309=((cj2)*(px));
IkReal x310=((py)*(x308));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(py)*(sj2)*(x306)))+(((IkReal(-1.00000000000000))*(sj2)*(x310)))+(((x308)*(x309)))+(((x306)*(x309))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(x306)*(x307)))+(((IkReal(-1.00000000000000))*(x307)*(x308)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x306)))+(((IkReal(-1.00000000000000))*(cj2)*(x310))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(py)*(sj2)*(x306)))+(((IkReal(-1.00000000000000))*(sj2)*(x310)))+(((x308)*(x309)))+(((x306)*(x309)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(x306)*(x307)))+(((IkReal(-1.00000000000000))*(x307)*(x308)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x306)))+(((IkReal(-1.00000000000000))*(cj2)*(x310)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x311=IKsin(j0);
IkReal x312=IKcos(j0);
IkReal x313=((py)*(sj2));
IkReal x314=((px)*(sj2));
IkReal x315=((IkReal(0.248000000000000))*(sj3));
IkReal x316=((IkReal(0.00800000000000000))*(cj3));
IkReal x317=((IkReal(1.00000000000000))*(x312));
IkReal x318=((py)*(x311));
IkReal x319=((py)*(x312));
IkReal x320=((IkReal(1.00000000000000))*(px)*(x311));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x316)))+(((IkReal(-1.00000000000000))*(sj2)*(x315)))+(((IkReal(-1.00000000000000))*(x318)))+(((IkReal(-1.00000000000000))*(px)*(x317))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x313)*(x317)))+(((cj2)*(px)*(x312)))+(((cj2)*(x318)))+(((x311)*(x314))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x320)))+(x319)+(((cj2)*(x315)))+(((cj2)*(x316))));
evalcond[3]=((((x312)*(x314)))+(((IkReal(-1.00000000000000))*(cj2)*(x320)))+(x315)+(x316)+(((cj2)*(x319)))+(((x311)*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x321=((IkReal(0.00800000000000000))*(px));
IkReal x322=((cj3)*(py));
IkReal x323=((sj1)*(sj2));
IkReal x324=((cj1)*(pz));
IkReal x325=((IkReal(0.248000000000000))*(px));
IkReal x326=((py)*(sj3));
if( IKabs(((gconst1)*(((((IkReal(-0.00800000000000000))*(x322)*(x323)))+(((IkReal(0.155000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x324)))+(((IkReal(-0.248000000000000))*(x323)*(x326)))+(((cj3)*(x325)))+(((IkReal(-1.00000000000000))*(sj3)*(x321))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(0.00800000000000000))*(x326)))+(((py)*(x324)))+(((IkReal(-1.00000000000000))*(cj3)*(x321)*(x323)))+(((IkReal(-0.155000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x323)*(x325)))+(((IkReal(-0.248000000000000))*(x322))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((IkReal(-0.00800000000000000))*(x322)*(x323)))+(((IkReal(0.155000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x324)))+(((IkReal(-0.248000000000000))*(x323)*(x326)))+(((cj3)*(x325)))+(((IkReal(-1.00000000000000))*(sj3)*(x321)))))), ((gconst1)*(((((IkReal(0.00800000000000000))*(x326)))+(((py)*(x324)))+(((IkReal(-1.00000000000000))*(cj3)*(x321)*(x323)))+(((IkReal(-0.155000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x323)*(x325)))+(((IkReal(-0.248000000000000))*(x322)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x327=IKcos(j0);
IkReal x328=IKsin(j0);
IkReal x329=((pz)*(sj1));
IkReal x330=((IkReal(0.248000000000000))*(cj3));
IkReal x331=((IkReal(0.00800000000000000))*(sj3));
IkReal x332=((IkReal(0.310000000000000))*(sj1));
IkReal x333=((cj1)*(pz));
IkReal x334=((IkReal(0.248000000000000))*(sj3));
IkReal x335=((cj1)*(cj2));
IkReal x336=((IkReal(0.00800000000000000))*(cj3));
IkReal x337=((cj1)*(sj2));
IkReal x338=((px)*(x327));
IkReal x339=((px)*(x328));
IkReal x340=((py)*(x327));
IkReal x341=((py)*(x328));
evalcond[0]=((IkReal(0.0375430000000000))+(((x332)*(x339)))+(((IkReal(-1.00000000000000))*(x332)*(x340)))+(((IkReal(0.310000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x336)))+(((IkReal(-1.00000000000000))*(sj2)*(x334)))+(((IkReal(-1.00000000000000))*(x338)))+(((IkReal(-1.00000000000000))*(x341))));
evalcond[2]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x339)))+(x330)+(((IkReal(-1.00000000000000))*(x333)))+(((sj1)*(x340)))+(((IkReal(-1.00000000000000))*(x331))));
evalcond[3]=((((x337)*(x340)))+(((cj2)*(x338)))+(((sj2)*(x329)))+(((IkReal(-1.00000000000000))*(x337)*(x339)))+(((cj2)*(x341))));
evalcond[4]=((x340)+(((IkReal(-1.00000000000000))*(x339)))+(((IkReal(0.155000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x335)*(x336)))+(((IkReal(-1.00000000000000))*(x334)*(x335)))+(((sj1)*(x330)))+(((IkReal(-1.00000000000000))*(sj1)*(x331))));
evalcond[5]=((((sj2)*(x338)))+(((x335)*(x339)))+(((IkReal(-1.00000000000000))*(cj2)*(x329)))+(((sj2)*(x341)))+(((IkReal(-1.00000000000000))*(x335)*(x340)))+(x336)+(x334));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x342=((sj1)*(sj2));
IkReal x343=((IkReal(0.248000000000000))*(cj3));
IkReal x344=((IkReal(7.68800000000000))*(sj3));
IkReal x345=((IkReal(100.000000000000))*(pp));
IkReal x346=((IkReal(31.0000000000000))*(cj1)*(pz));
if( IKabs(((gconst0)*(((((IkReal(-3.75430000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x346)))+(((IkReal(-1.00000000000000))*(py)*(x342)*(x343)))+(((IkReal(-1.00000000000000))*(py)*(x342)*(x344)))+(((px)*(x345))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((py)*(x346)))+(((IkReal(3.75430000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x345)))+(((IkReal(-1.00000000000000))*(px)*(x342)*(x344)))+(((IkReal(-1.00000000000000))*(px)*(x342)*(x343))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(-3.75430000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x346)))+(((IkReal(-1.00000000000000))*(py)*(x342)*(x343)))+(((IkReal(-1.00000000000000))*(py)*(x342)*(x344)))+(((px)*(x345)))))), ((gconst0)*(((((py)*(x346)))+(((IkReal(3.75430000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x345)))+(((IkReal(-1.00000000000000))*(px)*(x342)*(x344)))+(((IkReal(-1.00000000000000))*(px)*(x342)*(x343)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x347=IKcos(j0);
IkReal x348=IKsin(j0);
IkReal x349=((pz)*(sj1));
IkReal x350=((IkReal(0.248000000000000))*(cj3));
IkReal x351=((IkReal(0.00800000000000000))*(sj3));
IkReal x352=((IkReal(0.310000000000000))*(sj1));
IkReal x353=((cj1)*(pz));
IkReal x354=((IkReal(0.248000000000000))*(sj3));
IkReal x355=((cj1)*(cj2));
IkReal x356=((IkReal(0.00800000000000000))*(cj3));
IkReal x357=((cj1)*(sj2));
IkReal x358=((px)*(x347));
IkReal x359=((px)*(x348));
IkReal x360=((py)*(x347));
IkReal x361=((py)*(x348));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(-1.00000000000000))*(x352)*(x360)))+(((x352)*(x359)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.310000000000000))*(x353))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x354)))+(((IkReal(-1.00000000000000))*(sj2)*(x356)))+(((IkReal(-1.00000000000000))*(x361)))+(((IkReal(-1.00000000000000))*(x358))));
evalcond[2]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x351)))+(((sj1)*(x360)))+(((IkReal(-1.00000000000000))*(x353)))+(x350)+(((IkReal(-1.00000000000000))*(sj1)*(x359))));
evalcond[3]=((((sj2)*(x349)))+(((IkReal(-1.00000000000000))*(x357)*(x359)))+(((cj2)*(x361)))+(((x357)*(x360)))+(((cj2)*(x358))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x359)))+(x360)+(((sj1)*(x350)))+(((IkReal(-1.00000000000000))*(x354)*(x355)))+(((IkReal(0.155000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x355)*(x356)))+(((IkReal(-1.00000000000000))*(sj1)*(x351))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj2)*(x349)))+(((x355)*(x359)))+(((sj2)*(x358)))+(x354)+(x356)+(((sj2)*(x361)))+(((IkReal(-1.00000000000000))*(x355)*(x360))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x362=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.248000000000000))*(sj2)*(sj3)))+(((IkReal(-0.00800000000000000))*(cj3)*(sj2))))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.248000000000000))*(sj2)*(sj3)))+(((IkReal(-0.00800000000000000))*(cj3)*(sj2))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x363=((IkReal(-1.00000000000000))*(IKasin(((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.248000000000000))*(sj2)*(sj3)))+(((IkReal(-0.00800000000000000))*(cj3)*(sj2)))))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x363)))+(((IkReal(-1.00000000000000))*(x362))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x362)))+(((IkReal(1.00000000000000))*(x363))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x364=(sj2)*(sj2);
IkReal x365=(cj2)*(cj2);
IkReal x366=(px)*(px);
IkReal x367=IKsin(j0);
IkReal x368=(py)*(py);
IkReal x369=IKcos(j0);
IkReal x370=((IkReal(0.00800000000000000))*(cj3)*(sj2));
IkReal x371=((IkReal(0.248000000000000))*(sj2)*(sj3));
IkReal x372=((IkReal(1.00000000000000))*(x368));
IkReal x373=((px)*(py)*(x364));
IkReal x374=((px)*(py)*(x365));
evalcond[0]=((((px)*(x370)))+(((px)*(x371)))+(((x369)*(((((x364)*(x366)))+(((x365)*(x366)))))))+(((x367)*(((x374)+(x373))))));
evalcond[1]=((((x367)*(((((IkReal(-1.00000000000000))*(x364)*(x372)))+(((IkReal(-1.00000000000000))*(x365)*(x372)))))))+(((x369)*(((((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(x373)))))))+(((IkReal(-1.00000000000000))*(py)*(x371)))+(((IkReal(-1.00000000000000))*(py)*(x370))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
IkReal x375=((cj2)*(pz));
IkReal x376=((px)*(sj0));
IkReal x377=((IkReal(7.68800000000000))*(cj3));
IkReal x378=((IkReal(0.248000000000000))*(sj3));
IkReal x379=((cj0)*(py));
gconst10=IKsign(((((IkReal(7.68800000000000))*(sj3)*(x375)))+(((IkReal(-4.80500000000000))*(x376)))+(((IkReal(-1.00000000000000))*(x378)*(x379)))+(((IkReal(0.248000000000000))*(cj3)*(x375)))+(((x376)*(x378)))+(((x377)*(x379)))+(((IkReal(-1.00000000000000))*(x376)*(x377)))+(((IkReal(4.80500000000000))*(x379)))));
IkReal x380=((px)*(sj0));
IkReal x381=((cj0)*(py));
IkReal x382=((IkReal(31.0000000000000))*(cj3));
IkReal x383=((cj2)*(pz));
dummyeval[0]=((((cj3)*(x383)))+(((IkReal(-1.00000000000000))*(x380)*(x382)))+(((IkReal(-19.3750000000000))*(x380)))+(((IkReal(19.3750000000000))*(x381)))+(((IkReal(31.0000000000000))*(sj3)*(x383)))+(((IkReal(-1.00000000000000))*(sj3)*(x381)))+(((x381)*(x382)))+(((sj3)*(x380))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x384=((IkReal(31.0000000000000))*(sj2));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(x384)*((cj0)*(cj0))*((py)*(py))))+(((IkReal(-1.00000000000000))*(x384)*((pz)*(pz))))+(((IkReal(-1.00000000000000))*(x384)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(62.0000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))));
IkReal x385=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x385)*((pz)*(pz))))+(((IkReal(-1.00000000000000))*(x385)*((cj0)*(cj0))*((py)*(py))))+(((IkReal(-1.00000000000000))*(x385)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x386=((cj0)*(px));
IkReal x387=((py)*(sj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x386)))+(((IkReal(-1.00000000000000))*(x387))));
evalcond[3]=((x386)+(x387));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(31.0000000000000))*((px)*(px))*((sj0)*(sj0))))+(((IkReal(31.0000000000000))*((pz)*(pz))))+(((IkReal(-62.0000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(31.0000000000000))*((cj0)*(cj0))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
IkReal x388=((px)*(sj0));
IkReal x389=((IkReal(7.68800000000000))*(cj3));
IkReal x390=((IkReal(0.248000000000000))*(sj3));
IkReal x391=((cj0)*(py));
gconst13=IKsign(((((IkReal(7.68800000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x390)*(x391)))+(((IkReal(-4.80500000000000))*(x388)))+(((x389)*(x391)))+(((IkReal(-1.00000000000000))*(x388)*(x389)))+(((IkReal(0.248000000000000))*(cj3)*(pz)))+(((x388)*(x390)))+(((IkReal(4.80500000000000))*(x391)))));
IkReal x392=((px)*(sj0));
IkReal x393=((cj0)*(py));
IkReal x394=((IkReal(31.0000000000000))*(cj3));
dummyeval[0]=((((IkReal(19.3750000000000))*(x393)))+(((IkReal(-1.00000000000000))*(sj3)*(x393)))+(((sj3)*(x392)))+(((IkReal(31.0000000000000))*(pz)*(sj3)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x392)*(x394)))+(((x393)*(x394)))+(((IkReal(-19.3750000000000))*(x392))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x395=((IkReal(31.0000000000000))*(pz));
IkReal x396=((cj3)*(pp));
IkReal x397=((pp)*(sj3));
if( IKabs(((gconst13)*(((IkReal(0.581916500000000))+(((IkReal(0.800000000000000))*(x397)))+(((pz)*(x395)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))+(((IkReal(-24.8000000000000))*(x396))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(0.800000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x395)))+(((IkReal(24.8000000000000))*(x397)))+(((IkReal(-0.931066400000000))*(sj3)))+(((cj0)*(py)*(x395)))+(((IkReal(-0.0300344000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst13)*(((IkReal(0.581916500000000))+(((IkReal(0.800000000000000))*(x397)))+(((pz)*(x395)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))+(((IkReal(-24.8000000000000))*(x396)))))), ((gconst13)*(((((IkReal(0.800000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x395)))+(((IkReal(24.8000000000000))*(x397)))+(((IkReal(-0.931066400000000))*(sj3)))+(((cj0)*(py)*(x395)))+(((IkReal(-0.0300344000000000))*(cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x398=IKsin(j1);
IkReal x399=IKcos(j1);
IkReal x400=((IkReal(0.00800000000000000))*(sj3));
IkReal x401=((IkReal(0.00800000000000000))*(cj3));
IkReal x402=((px)*(sj0));
IkReal x403=((IkReal(0.248000000000000))*(sj3));
IkReal x404=((IkReal(1.00000000000000))*(pz));
IkReal x405=((cj0)*(py));
IkReal x406=((IkReal(0.248000000000000))*(cj3));
IkReal x407=((cj3)*(x399));
IkReal x408=((pz)*(x399));
IkReal x409=((IkReal(0.310000000000000))*(x398));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(0.310000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x405)*(x409)))+(((x402)*(x409))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x398)*(x402)))+(x406)+(((IkReal(-1.00000000000000))*(x399)*(x404)))+(((x398)*(x405)))+(((IkReal(-1.00000000000000))*(x400))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x399)*(x400)))+(((x399)*(x406)))+(((x398)*(x403)))+(((x398)*(x401)))+(((IkReal(-1.00000000000000))*(x404)))+(((IkReal(0.155000000000000))*(x399))));
evalcond[3]=((x405)+(((IkReal(-1.00000000000000))*(x398)*(x400)))+(((IkReal(-1.00000000000000))*(x399)*(x403)))+(((IkReal(-1.00000000000000))*(x399)*(x401)))+(((x398)*(x406)))+(((IkReal(-1.00000000000000))*(x402)))+(((IkReal(0.155000000000000))*(x398))));
evalcond[4]=((x401)+(x403)+(((IkReal(-1.00000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(x399)*(x405)))+(((x399)*(x402))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x410=((IkReal(0.248000000000000))*(cj3));
IkReal x411=((cj0)*(py));
IkReal x412=((px)*(sj0));
IkReal x413=((IkReal(7.68800000000000))*(sj3));
IkReal x414=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst12)*(((((IkReal(-3.75430000000000))*(x412)))+(((IkReal(3.75430000000000))*(x411)))+(((pz)*(x410)))+(((pz)*(x413)))+(((IkReal(-1.00000000000000))*(x411)*(x414)))+(((x412)*(x414))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-3.75430000000000))*(pz)))+(((pz)*(x414)))+(((IkReal(-1.00000000000000))*(x412)*(x413)))+(((x411)*(x413)))+(((x410)*(x411)))+(((IkReal(-1.00000000000000))*(x410)*(x412))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst12)*(((((IkReal(-3.75430000000000))*(x412)))+(((IkReal(3.75430000000000))*(x411)))+(((pz)*(x410)))+(((pz)*(x413)))+(((IkReal(-1.00000000000000))*(x411)*(x414)))+(((x412)*(x414)))))), ((gconst12)*(((((IkReal(-3.75430000000000))*(pz)))+(((pz)*(x414)))+(((IkReal(-1.00000000000000))*(x412)*(x413)))+(((x411)*(x413)))+(((x410)*(x411)))+(((IkReal(-1.00000000000000))*(x410)*(x412)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x415=IKsin(j1);
IkReal x416=IKcos(j1);
IkReal x417=((IkReal(0.00800000000000000))*(sj3));
IkReal x418=((IkReal(0.00800000000000000))*(cj3));
IkReal x419=((px)*(sj0));
IkReal x420=((IkReal(0.248000000000000))*(sj3));
IkReal x421=((IkReal(1.00000000000000))*(pz));
IkReal x422=((cj0)*(py));
IkReal x423=((IkReal(0.248000000000000))*(cj3));
IkReal x424=((cj3)*(x416));
IkReal x425=((pz)*(x416));
IkReal x426=((IkReal(0.310000000000000))*(x415));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(-1.00000000000000))*(x422)*(x426)))+(((x419)*(x426)))+(((IkReal(0.310000000000000))*(x425)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x415)*(x419)))+(((IkReal(-1.00000000000000))*(x416)*(x421)))+(((x415)*(x422)))+(x423)+(((IkReal(-1.00000000000000))*(x417))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x421)))+(((x415)*(x418)))+(((x415)*(x420)))+(((IkReal(0.155000000000000))*(x416)))+(((x416)*(x423)))+(((IkReal(-1.00000000000000))*(x416)*(x417))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x416)*(x420)))+(((x415)*(x423)))+(((IkReal(0.155000000000000))*(x415)))+(x422)+(((IkReal(-1.00000000000000))*(x416)*(x418)))+(((IkReal(-1.00000000000000))*(x415)*(x417)))+(((IkReal(-1.00000000000000))*(x419))));
evalcond[4]=((((x416)*(x419)))+(((IkReal(-1.00000000000000))*(x416)*(x422)))+(x418)+(x420)+(((IkReal(-1.00000000000000))*(x415)*(x421))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x427=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x427;
evalcond[3]=x427;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(62.0000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-31.0000000000000))*((cj0)*(cj0))*((py)*(py))))+(((IkReal(-31.0000000000000))*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-31.0000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
IkReal x428=((px)*(sj0));
IkReal x429=((IkReal(7.68800000000000))*(cj3));
IkReal x430=((IkReal(0.248000000000000))*(sj3));
IkReal x431=((cj0)*(py));
gconst15=IKsign(((((IkReal(-1.00000000000000))*(x430)*(x431)))+(((x429)*(x431)))+(((x428)*(x430)))+(((IkReal(-0.248000000000000))*(cj3)*(pz)))+(((IkReal(-4.80500000000000))*(x428)))+(((IkReal(-1.00000000000000))*(x428)*(x429)))+(((IkReal(-7.68800000000000))*(pz)*(sj3)))+(((IkReal(4.80500000000000))*(x431)))));
IkReal x432=((px)*(sj0));
IkReal x433=((cj0)*(py));
IkReal x434=((IkReal(31.0000000000000))*(cj3));
dummyeval[0]=((((IkReal(-31.0000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x432)*(x434)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(19.3750000000000))*(x433)))+(((sj3)*(x432)))+(((x433)*(x434)))+(((IkReal(-19.3750000000000))*(x432)))+(((IkReal(-1.00000000000000))*(sj3)*(x433))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x435=((IkReal(31.0000000000000))*(pz));
IkReal x436=((cj3)*(pp));
IkReal x437=((pp)*(sj3));
if( IKabs(((gconst15)*(((IkReal(0.581916500000000))+(((IkReal(0.800000000000000))*(x437)))+(((pz)*(x435)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-24.8000000000000))*(x436)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-0.800000000000000))*(x436)))+(((IkReal(0.931066400000000))*(sj3)))+(((IkReal(0.0300344000000000))*(cj3)))+(((IkReal(-24.8000000000000))*(x437)))+(((cj0)*(py)*(x435)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x435))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst15)*(((IkReal(0.581916500000000))+(((IkReal(0.800000000000000))*(x437)))+(((pz)*(x435)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-24.8000000000000))*(x436)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))))), ((gconst15)*(((((IkReal(-0.800000000000000))*(x436)))+(((IkReal(0.931066400000000))*(sj3)))+(((IkReal(0.0300344000000000))*(cj3)))+(((IkReal(-24.8000000000000))*(x437)))+(((cj0)*(py)*(x435)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x435)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x438=IKsin(j1);
IkReal x439=IKcos(j1);
IkReal x440=((cj0)*(py));
IkReal x441=((IkReal(0.00800000000000000))*(sj3));
IkReal x442=((IkReal(0.00800000000000000))*(cj3));
IkReal x443=((IkReal(0.248000000000000))*(sj3));
IkReal x444=((IkReal(0.248000000000000))*(cj3));
IkReal x445=((cj3)*(x439));
IkReal x446=((pz)*(x439));
IkReal x447=((IkReal(1.00000000000000))*(px)*(sj0));
IkReal x448=((IkReal(0.310000000000000))*(x438));
evalcond[0]=((IkReal(0.0375430000000000))+(((px)*(sj0)*(x448)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.310000000000000))*(x446)))+(((IkReal(-1.00000000000000))*(x440)*(x448))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x441)))+(((IkReal(-1.00000000000000))*(x438)*(x447)))+(((IkReal(-1.00000000000000))*(x446)))+(x444)+(((x438)*(x440))));
evalcond[2]=((((x439)*(x444)))+(((IkReal(-1.00000000000000))*(x438)*(x443)))+(((IkReal(-1.00000000000000))*(x438)*(x442)))+(((IkReal(-1.00000000000000))*(x439)*(x441)))+(((IkReal(0.155000000000000))*(x439)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((((x439)*(x442)))+(((x439)*(x443)))+(((IkReal(-1.00000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(x438)*(x441)))+(((IkReal(0.155000000000000))*(x438)))+(x440)+(((x438)*(x444))));
evalcond[4]=((((x439)*(x440)))+(((pz)*(x438)))+(((IkReal(-1.00000000000000))*(x439)*(x447)))+(x443)+(x442));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x449=((px)*(sj0));
IkReal x450=((cj0)*(py));
IkReal x451=((IkReal(7.68800000000000))*(sj3));
IkReal x452=((IkReal(0.248000000000000))*(cj3));
IkReal x453=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst14)*(((((IkReal(-3.75430000000000))*(x450)))+(((pz)*(x451)))+(((pz)*(x452)))+(((x450)*(x453)))+(((IkReal(-1.00000000000000))*(x449)*(x453)))+(((IkReal(3.75430000000000))*(x449))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(3.75430000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x453)))+(((x450)*(x451)))+(((x450)*(x452)))+(((IkReal(-1.00000000000000))*(x449)*(x452)))+(((IkReal(-1.00000000000000))*(x449)*(x451))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst14)*(((((IkReal(-3.75430000000000))*(x450)))+(((pz)*(x451)))+(((pz)*(x452)))+(((x450)*(x453)))+(((IkReal(-1.00000000000000))*(x449)*(x453)))+(((IkReal(3.75430000000000))*(x449)))))), ((gconst14)*(((((IkReal(3.75430000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x453)))+(((x450)*(x451)))+(((x450)*(x452)))+(((IkReal(-1.00000000000000))*(x449)*(x452)))+(((IkReal(-1.00000000000000))*(x449)*(x451)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x454=IKsin(j1);
IkReal x455=IKcos(j1);
IkReal x456=((cj0)*(py));
IkReal x457=((IkReal(0.00800000000000000))*(sj3));
IkReal x458=((IkReal(0.00800000000000000))*(cj3));
IkReal x459=((IkReal(0.248000000000000))*(sj3));
IkReal x460=((IkReal(0.248000000000000))*(cj3));
IkReal x461=((cj3)*(x455));
IkReal x462=((pz)*(x455));
IkReal x463=((IkReal(1.00000000000000))*(px)*(sj0));
IkReal x464=((IkReal(0.310000000000000))*(x454));
evalcond[0]=((IkReal(0.0375430000000000))+(((px)*(sj0)*(x464)))+(((IkReal(-1.00000000000000))*(x456)*(x464)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.310000000000000))*(x462))));
evalcond[1]=((IkReal(0.155000000000000))+(((x454)*(x456)))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(x454)*(x463)))+(((IkReal(-1.00000000000000))*(x457)))+(x460));
evalcond[2]=((((x455)*(x460)))+(((IkReal(-1.00000000000000))*(x454)*(x458)))+(((IkReal(-1.00000000000000))*(x454)*(x459)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x455)*(x457)))+(((IkReal(0.155000000000000))*(x455))));
evalcond[3]=((((x455)*(x459)))+(((x455)*(x458)))+(((x454)*(x460)))+(((IkReal(-1.00000000000000))*(x463)))+(((IkReal(-1.00000000000000))*(x454)*(x457)))+(x456)+(((IkReal(0.155000000000000))*(x454))));
evalcond[4]=((((x455)*(x456)))+(x458)+(x459)+(((IkReal(-1.00000000000000))*(x455)*(x463)))+(((pz)*(x454))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x465=((px)*(sj0));
IkReal x466=((cj0)*(py));
IkReal x467=((IkReal(3.75430000000000))*(sj2));
IkReal x468=((IkReal(100.000000000000))*(pp)*(sj2));
IkReal x469=((IkReal(31.0000000000000))*(cj2)*(pz));
IkReal x470=((IkReal(31.0000000000000))*(cj2)*(px)*(py));
IkReal x471=((IkReal(31.0000000000000))*(cj0)*(cj2)*(sj0));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(x465)*(x468)))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((py)*(sj0)*(x469)))+(((x465)*(x467)))+(((x466)*(x468)))+(((cj0)*(px)*(x469))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(31.0000000000000))*(cj0)*(cj2)*(px)*(x466)))+(((IkReal(31.0000000000000))*(cj2)*(py)*(sj0)*(x466)))+(((IkReal(-31.0000000000000))*(cj2)*(py)*(sj0)*(x465)))+(((IkReal(-1.00000000000000))*(pz)*(x468)))+(((IkReal(-31.0000000000000))*(cj0)*(cj2)*(px)*(x465)))+(((pz)*(x467))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(x465)*(x468)))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((py)*(sj0)*(x469)))+(((x465)*(x467)))+(((x466)*(x468)))+(((cj0)*(px)*(x469)))))), ((gconst11)*(((((IkReal(31.0000000000000))*(cj0)*(cj2)*(px)*(x466)))+(((IkReal(31.0000000000000))*(cj2)*(py)*(sj0)*(x466)))+(((IkReal(-31.0000000000000))*(cj2)*(py)*(sj0)*(x465)))+(((IkReal(-1.00000000000000))*(pz)*(x468)))+(((IkReal(-31.0000000000000))*(cj0)*(cj2)*(px)*(x465)))+(((pz)*(x467)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x472=IKsin(j1);
IkReal x473=IKcos(j1);
IkReal x474=((px)*(sj0));
IkReal x475=((IkReal(0.00800000000000000))*(sj3));
IkReal x476=((cj0)*(py));
IkReal x477=((cj0)*(px));
IkReal x478=((IkReal(0.248000000000000))*(cj3));
IkReal x479=((IkReal(0.00800000000000000))*(cj3));
IkReal x480=((IkReal(1.00000000000000))*(pz));
IkReal x481=((IkReal(0.248000000000000))*(sj3));
IkReal x482=((py)*(sj0));
IkReal x483=((cj2)*(x473));
IkReal x484=((pz)*(x473));
IkReal x485=((cj2)*(x472));
IkReal x486=((sj2)*(x473));
IkReal x487=((IkReal(0.310000000000000))*(x472));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(-1.00000000000000))*(x476)*(x487)))+(((x474)*(x487)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.310000000000000))*(x484))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x472)*(x474)))+(((x472)*(x476)))+(((IkReal(-1.00000000000000))*(x475)))+(x478)+(((IkReal(-1.00000000000000))*(x473)*(x480))));
evalcond[2]=((((x473)*(x478)))+(((IkReal(-1.00000000000000))*(x480)))+(((IkReal(-1.00000000000000))*(x473)*(x475)))+(((x481)*(x485)))+(((IkReal(0.155000000000000))*(x473)))+(((x479)*(x485))));
evalcond[3]=((((cj2)*(x482)))+(((x476)*(x486)))+(((IkReal(-1.00000000000000))*(x474)*(x486)))+(((cj2)*(x477)))+(((pz)*(sj2)*(x472))));
evalcond[4]=((((x472)*(x478)))+(((IkReal(-1.00000000000000))*(x472)*(x475)))+(((IkReal(-1.00000000000000))*(x474)))+(((IkReal(-1.00000000000000))*(x481)*(x483)))+(x476)+(((IkReal(-1.00000000000000))*(x479)*(x483)))+(((IkReal(0.155000000000000))*(x472))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x476)*(x483)))+(((x474)*(x483)))+(x481)+(x479)+(((IkReal(-1.00000000000000))*(x480)*(x485)))+(((sj2)*(x482)))+(((sj2)*(x477))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x488=((IkReal(31.0000000000000))*(pz));
IkReal x489=((cj2)*(sj3));
IkReal x490=((cj2)*(cj3));
IkReal x491=((IkReal(24.8000000000000))*(pp));
IkReal x492=((IkReal(0.800000000000000))*(pp));
if( IKabs(((gconst10)*(((IkReal(0.581916500000000))+(((IkReal(-1.00000000000000))*(cj3)*(x491)))+(((pz)*(x488)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((sj3)*(x492)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-0.931066400000000))*(x489)))+(((x489)*(x491)))+(((x490)*(x492)))+(((cj0)*(py)*(x488)))+(((IkReal(-0.0300344000000000))*(x490)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x488))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst10)*(((IkReal(0.581916500000000))+(((IkReal(-1.00000000000000))*(cj3)*(x491)))+(((pz)*(x488)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((sj3)*(x492)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))))), ((gconst10)*(((((IkReal(-0.931066400000000))*(x489)))+(((x489)*(x491)))+(((x490)*(x492)))+(((cj0)*(py)*(x488)))+(((IkReal(-0.0300344000000000))*(x490)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x488)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x493=IKsin(j1);
IkReal x494=IKcos(j1);
IkReal x495=((px)*(sj0));
IkReal x496=((IkReal(0.00800000000000000))*(sj3));
IkReal x497=((cj0)*(py));
IkReal x498=((cj0)*(px));
IkReal x499=((IkReal(0.248000000000000))*(cj3));
IkReal x500=((IkReal(0.00800000000000000))*(cj3));
IkReal x501=((IkReal(1.00000000000000))*(pz));
IkReal x502=((IkReal(0.248000000000000))*(sj3));
IkReal x503=((py)*(sj0));
IkReal x504=((cj2)*(x494));
IkReal x505=((pz)*(x494));
IkReal x506=((cj2)*(x493));
IkReal x507=((sj2)*(x494));
IkReal x508=((IkReal(0.310000000000000))*(x493));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(0.310000000000000))*(x505)))+(((IkReal(-1.00000000000000))*(x497)*(x508)))+(((x495)*(x508)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(-1.00000000000000))*(x496)))+(((x493)*(x497)))+(((IkReal(-1.00000000000000))*(x494)*(x501)))+(x499));
evalcond[2]=((((IkReal(0.155000000000000))*(x494)))+(((x500)*(x506)))+(((IkReal(-1.00000000000000))*(x494)*(x496)))+(((IkReal(-1.00000000000000))*(x501)))+(((x494)*(x499)))+(((x502)*(x506))));
evalcond[3]=((((cj2)*(x503)))+(((x497)*(x507)))+(((IkReal(-1.00000000000000))*(x495)*(x507)))+(((pz)*(sj2)*(x493)))+(((cj2)*(x498))));
evalcond[4]=((((IkReal(0.155000000000000))*(x493)))+(((x493)*(x499)))+(((IkReal(-1.00000000000000))*(x493)*(x496)))+(((IkReal(-1.00000000000000))*(x502)*(x504)))+(((IkReal(-1.00000000000000))*(x495)))+(x497)+(((IkReal(-1.00000000000000))*(x500)*(x504))));
evalcond[5]=((((sj2)*(x503)))+(((x495)*(x504)))+(((IkReal(-1.00000000000000))*(x501)*(x506)))+(x500)+(x502)+(((sj2)*(x498)))+(((IkReal(-1.00000000000000))*(x497)*(x504))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x509=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.248000000000000))*(sj2)*(sj3)))+(((IkReal(-0.00800000000000000))*(cj3)*(sj2))))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.248000000000000))*(sj2)*(sj3)))+(((IkReal(-0.00800000000000000))*(cj3)*(sj2))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x510=((IkReal(-1.00000000000000))*(IKasin(((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.248000000000000))*(sj2)*(sj3)))+(((IkReal(-0.00800000000000000))*(cj3)*(sj2)))))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x509)))+(((IkReal(-1.00000000000000))*(x510))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x509)))+(((IkReal(1.00000000000000))*(x510))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst10;
IkReal x511=((cj2)*(pz));
IkReal x512=((px)*(sj0));
IkReal x513=((IkReal(7.68800000000000))*(cj3));
IkReal x514=((IkReal(0.248000000000000))*(sj3));
IkReal x515=((cj0)*(py));
gconst10=IKsign(((((IkReal(-1.00000000000000))*(x514)*(x515)))+(((IkReal(-4.80500000000000))*(x512)))+(((x513)*(x515)))+(((IkReal(-1.00000000000000))*(x512)*(x513)))+(((IkReal(0.248000000000000))*(cj3)*(x511)))+(((x512)*(x514)))+(((IkReal(4.80500000000000))*(x515)))+(((IkReal(7.68800000000000))*(sj3)*(x511)))));
IkReal x516=((px)*(sj0));
IkReal x517=((cj0)*(py));
IkReal x518=((IkReal(31.0000000000000))*(cj3));
IkReal x519=((cj2)*(pz));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj3)*(x517)))+(((IkReal(19.3750000000000))*(x517)))+(((IkReal(31.0000000000000))*(sj3)*(x519)))+(((x517)*(x518)))+(((IkReal(-1.00000000000000))*(x516)*(x518)))+(((cj3)*(x519)))+(((sj3)*(x516)))+(((IkReal(-19.3750000000000))*(x516))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x520=((IkReal(31.0000000000000))*(sj2));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(x520)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*(x520)*((pz)*(pz))))+(((IkReal(-1.00000000000000))*(x520)*((cj0)*(cj0))*((py)*(py))))+(((IkReal(62.0000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))));
IkReal x521=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x521)*((px)*(px))*((sj0)*(sj0))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(x521)*((cj0)*(cj0))*((py)*(py))))+(((IkReal(-1.00000000000000))*(x521)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x522=((cj0)*(px));
IkReal x523=((py)*(sj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x523)))+(((IkReal(-1.00000000000000))*(x522))));
evalcond[3]=((x522)+(x523));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(31.0000000000000))*((px)*(px))*((sj0)*(sj0))))+(((IkReal(31.0000000000000))*((pz)*(pz))))+(((IkReal(-62.0000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(31.0000000000000))*((cj0)*(cj0))*((py)*(py))))));
dummyeval[0]=(((((px)*(px))*((sj0)*(sj0))))+((pz)*(pz))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
IkReal x524=((px)*(sj0));
IkReal x525=((IkReal(7.68800000000000))*(cj3));
IkReal x526=((IkReal(0.248000000000000))*(sj3));
IkReal x527=((cj0)*(py));
gconst13=IKsign(((((IkReal(-1.00000000000000))*(x524)*(x525)))+(((IkReal(7.68800000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x526)*(x527)))+(((x525)*(x527)))+(((IkReal(-4.80500000000000))*(x524)))+(((x524)*(x526)))+(((IkReal(0.248000000000000))*(cj3)*(pz)))+(((IkReal(4.80500000000000))*(x527)))));
IkReal x528=((px)*(sj0));
IkReal x529=((cj0)*(py));
IkReal x530=((IkReal(31.0000000000000))*(cj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj3)*(x529)))+(((IkReal(19.3750000000000))*(x529)))+(((sj3)*(x528)))+(((IkReal(-1.00000000000000))*(x528)*(x530)))+(((IkReal(-19.3750000000000))*(x528)))+(((IkReal(31.0000000000000))*(pz)*(sj3)))+(((cj3)*(pz)))+(((x529)*(x530))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x531=((IkReal(31.0000000000000))*(pz));
IkReal x532=((cj3)*(pp));
IkReal x533=((pp)*(sj3));
if( IKabs(((gconst13)*(((IkReal(0.581916500000000))+(((pz)*(x531)))+(((IkReal(0.800000000000000))*(x533)))+(((IkReal(-24.8000000000000))*(x532)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((cj0)*(py)*(x531)))+(((IkReal(0.800000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x531)))+(((IkReal(24.8000000000000))*(x533)))+(((IkReal(-0.931066400000000))*(sj3)))+(((IkReal(-0.0300344000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst13)*(((IkReal(0.581916500000000))+(((pz)*(x531)))+(((IkReal(0.800000000000000))*(x533)))+(((IkReal(-24.8000000000000))*(x532)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))))), ((gconst13)*(((((cj0)*(py)*(x531)))+(((IkReal(0.800000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x531)))+(((IkReal(24.8000000000000))*(x533)))+(((IkReal(-0.931066400000000))*(sj3)))+(((IkReal(-0.0300344000000000))*(cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x534=IKsin(j1);
IkReal x535=IKcos(j1);
IkReal x536=((IkReal(0.00800000000000000))*(sj3));
IkReal x537=((IkReal(0.00800000000000000))*(cj3));
IkReal x538=((px)*(sj0));
IkReal x539=((IkReal(0.248000000000000))*(sj3));
IkReal x540=((IkReal(1.00000000000000))*(pz));
IkReal x541=((cj0)*(py));
IkReal x542=((IkReal(0.248000000000000))*(cj3));
IkReal x543=((cj3)*(x535));
IkReal x544=((pz)*(x535));
IkReal x545=((IkReal(0.310000000000000))*(x534));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(-1.00000000000000))*(x541)*(x545)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.310000000000000))*(x544)))+(((x538)*(x545))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x536)))+(x542)+(((IkReal(-1.00000000000000))*(x535)*(x540)))+(((x534)*(x541)))+(((IkReal(-1.00000000000000))*(x534)*(x538))));
evalcond[2]=((((IkReal(0.155000000000000))*(x535)))+(((IkReal(-1.00000000000000))*(x540)))+(((x534)*(x539)))+(((x534)*(x537)))+(((x535)*(x542)))+(((IkReal(-1.00000000000000))*(x535)*(x536))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x534)*(x536)))+(((IkReal(-1.00000000000000))*(x538)))+(((IkReal(0.155000000000000))*(x534)))+(x541)+(((x534)*(x542)))+(((IkReal(-1.00000000000000))*(x535)*(x539)))+(((IkReal(-1.00000000000000))*(x535)*(x537))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x535)*(x541)))+(((IkReal(-1.00000000000000))*(x534)*(x540)))+(x537)+(x539)+(((x535)*(x538))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x546=((IkReal(0.248000000000000))*(cj3));
IkReal x547=((cj0)*(py));
IkReal x548=((px)*(sj0));
IkReal x549=((IkReal(7.68800000000000))*(sj3));
IkReal x550=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst12)*(((((x548)*(x550)))+(((IkReal(3.75430000000000))*(x547)))+(((IkReal(-3.75430000000000))*(x548)))+(((IkReal(-1.00000000000000))*(x547)*(x550)))+(((pz)*(x546)))+(((pz)*(x549))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-3.75430000000000))*(pz)))+(((pz)*(x550)))+(((x547)*(x549)))+(((IkReal(-1.00000000000000))*(x548)*(x549)))+(((IkReal(-1.00000000000000))*(x546)*(x548)))+(((x546)*(x547))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst12)*(((((x548)*(x550)))+(((IkReal(3.75430000000000))*(x547)))+(((IkReal(-3.75430000000000))*(x548)))+(((IkReal(-1.00000000000000))*(x547)*(x550)))+(((pz)*(x546)))+(((pz)*(x549)))))), ((gconst12)*(((((IkReal(-3.75430000000000))*(pz)))+(((pz)*(x550)))+(((x547)*(x549)))+(((IkReal(-1.00000000000000))*(x548)*(x549)))+(((IkReal(-1.00000000000000))*(x546)*(x548)))+(((x546)*(x547)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x551=IKsin(j1);
IkReal x552=IKcos(j1);
IkReal x553=((IkReal(0.00800000000000000))*(sj3));
IkReal x554=((IkReal(0.00800000000000000))*(cj3));
IkReal x555=((px)*(sj0));
IkReal x556=((IkReal(0.248000000000000))*(sj3));
IkReal x557=((IkReal(1.00000000000000))*(pz));
IkReal x558=((cj0)*(py));
IkReal x559=((IkReal(0.248000000000000))*(cj3));
IkReal x560=((cj3)*(x552));
IkReal x561=((pz)*(x552));
IkReal x562=((IkReal(0.310000000000000))*(x551));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(-1.00000000000000))*(x558)*(x562)))+(((IkReal(-1.00000000000000))*(pp)))+(((x555)*(x562)))+(((IkReal(0.310000000000000))*(x561))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(x552)*(x557)))+(((IkReal(-1.00000000000000))*(x551)*(x555)))+(x559)+(((x551)*(x558))));
evalcond[2]=((((IkReal(0.155000000000000))*(x552)))+(((IkReal(-1.00000000000000))*(x557)))+(((IkReal(-1.00000000000000))*(x552)*(x553)))+(((x551)*(x554)))+(((x551)*(x556)))+(((x552)*(x559))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x555)))+(((IkReal(-1.00000000000000))*(x551)*(x553)))+(((IkReal(0.155000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(x552)*(x554)))+(((IkReal(-1.00000000000000))*(x552)*(x556)))+(x558)+(((x551)*(x559))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x551)*(x557)))+(((IkReal(-1.00000000000000))*(x552)*(x558)))+(x556)+(x554)+(((x552)*(x555))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x563=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0855930000000000))+(((IkReal(-0.00248000000000000))*(sj3)))+(((IkReal(0.0768800000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x563;
evalcond[3]=x563;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(62.0000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-31.0000000000000))*((cj0)*(cj0))*((py)*(py))))+(((IkReal(-31.0000000000000))*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-31.0000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
IkReal x564=((px)*(sj0));
IkReal x565=((IkReal(7.68800000000000))*(cj3));
IkReal x566=((IkReal(0.248000000000000))*(sj3));
IkReal x567=((cj0)*(py));
gconst15=IKsign(((((IkReal(-4.80500000000000))*(x564)))+(((IkReal(-1.00000000000000))*(x564)*(x565)))+(((x565)*(x567)))+(((x564)*(x566)))+(((IkReal(-1.00000000000000))*(x566)*(x567)))+(((IkReal(4.80500000000000))*(x567)))+(((IkReal(-0.248000000000000))*(cj3)*(pz)))+(((IkReal(-7.68800000000000))*(pz)*(sj3)))));
IkReal x568=((px)*(sj0));
IkReal x569=((cj0)*(py));
IkReal x570=((IkReal(31.0000000000000))*(cj3));
dummyeval[0]=((((IkReal(19.3750000000000))*(x569)))+(((sj3)*(x568)))+(((IkReal(-31.0000000000000))*(pz)*(sj3)))+(((IkReal(-19.3750000000000))*(x568)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((x569)*(x570)))+(((IkReal(-1.00000000000000))*(sj3)*(x569)))+(((IkReal(-1.00000000000000))*(x568)*(x570))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x571=((IkReal(31.0000000000000))*(pz));
IkReal x572=((cj3)*(pp));
IkReal x573=((pp)*(sj3));
if( IKabs(((gconst15)*(((IkReal(0.581916500000000))+(((IkReal(-24.8000000000000))*(x572)))+(((pz)*(x571)))+(((IkReal(0.800000000000000))*(x573)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(sj0)*(x571)))+(((IkReal(-0.800000000000000))*(x572)))+(((IkReal(-24.8000000000000))*(x573)))+(((IkReal(0.931066400000000))*(sj3)))+(((IkReal(0.0300344000000000))*(cj3)))+(((cj0)*(py)*(x571))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst15)*(((IkReal(0.581916500000000))+(((IkReal(-24.8000000000000))*(x572)))+(((pz)*(x571)))+(((IkReal(0.800000000000000))*(x573)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(sj0)*(x571)))+(((IkReal(-0.800000000000000))*(x572)))+(((IkReal(-24.8000000000000))*(x573)))+(((IkReal(0.931066400000000))*(sj3)))+(((IkReal(0.0300344000000000))*(cj3)))+(((cj0)*(py)*(x571)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x574=IKsin(j1);
IkReal x575=IKcos(j1);
IkReal x576=((cj0)*(py));
IkReal x577=((IkReal(0.00800000000000000))*(sj3));
IkReal x578=((IkReal(0.00800000000000000))*(cj3));
IkReal x579=((IkReal(0.248000000000000))*(sj3));
IkReal x580=((IkReal(0.248000000000000))*(cj3));
IkReal x581=((cj3)*(x575));
IkReal x582=((pz)*(x575));
IkReal x583=((IkReal(1.00000000000000))*(px)*(sj0));
IkReal x584=((IkReal(0.310000000000000))*(x574));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(0.310000000000000))*(x582)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x576)*(x584)))+(((px)*(sj0)*(x584))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x582)))+(((x574)*(x576)))+(((IkReal(-1.00000000000000))*(x577)))+(x580)+(((IkReal(-1.00000000000000))*(x574)*(x583))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x574)*(x579)))+(((IkReal(-1.00000000000000))*(x574)*(x578)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.155000000000000))*(x575)))+(((x575)*(x580)))+(((IkReal(-1.00000000000000))*(x575)*(x577))));
evalcond[3]=((((x575)*(x579)))+(((x575)*(x578)))+(((IkReal(-1.00000000000000))*(x574)*(x577)))+(((x574)*(x580)))+(((IkReal(0.155000000000000))*(x574)))+(x576)+(((IkReal(-1.00000000000000))*(x583))));
evalcond[4]=((((pz)*(x574)))+(((x575)*(x576)))+(x579)+(x578)+(((IkReal(-1.00000000000000))*(x575)*(x583))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x585=((px)*(sj0));
IkReal x586=((cj0)*(py));
IkReal x587=((IkReal(7.68800000000000))*(sj3));
IkReal x588=((IkReal(0.248000000000000))*(cj3));
IkReal x589=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst14)*(((((x586)*(x589)))+(((IkReal(-3.75430000000000))*(x586)))+(((IkReal(-1.00000000000000))*(x585)*(x589)))+(((IkReal(3.75430000000000))*(x585)))+(((pz)*(x588)))+(((pz)*(x587))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(3.75430000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x589)))+(((x586)*(x588)))+(((x586)*(x587)))+(((IkReal(-1.00000000000000))*(x585)*(x587)))+(((IkReal(-1.00000000000000))*(x585)*(x588))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst14)*(((((x586)*(x589)))+(((IkReal(-3.75430000000000))*(x586)))+(((IkReal(-1.00000000000000))*(x585)*(x589)))+(((IkReal(3.75430000000000))*(x585)))+(((pz)*(x588)))+(((pz)*(x587)))))), ((gconst14)*(((((IkReal(3.75430000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x589)))+(((x586)*(x588)))+(((x586)*(x587)))+(((IkReal(-1.00000000000000))*(x585)*(x587)))+(((IkReal(-1.00000000000000))*(x585)*(x588)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x590=IKsin(j1);
IkReal x591=IKcos(j1);
IkReal x592=((cj0)*(py));
IkReal x593=((IkReal(0.00800000000000000))*(sj3));
IkReal x594=((IkReal(0.00800000000000000))*(cj3));
IkReal x595=((IkReal(0.248000000000000))*(sj3));
IkReal x596=((IkReal(0.248000000000000))*(cj3));
IkReal x597=((cj3)*(x591));
IkReal x598=((pz)*(x591));
IkReal x599=((IkReal(1.00000000000000))*(px)*(sj0));
IkReal x600=((IkReal(0.310000000000000))*(x590));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(-1.00000000000000))*(x592)*(x600)))+(((IkReal(0.310000000000000))*(x598)))+(((IkReal(-1.00000000000000))*(pp)))+(((px)*(sj0)*(x600))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x598)))+(((IkReal(-1.00000000000000))*(x590)*(x599)))+(((IkReal(-1.00000000000000))*(x593)))+(x596)+(((x590)*(x592))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x590)*(x595)))+(((IkReal(-1.00000000000000))*(x590)*(x594)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.155000000000000))*(x591)))+(((x591)*(x596)))+(((IkReal(-1.00000000000000))*(x591)*(x593))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x590)*(x593)))+(((IkReal(-1.00000000000000))*(x599)))+(x592)+(((IkReal(0.155000000000000))*(x590)))+(((x590)*(x596)))+(((x591)*(x594)))+(((x591)*(x595))));
evalcond[4]=((((pz)*(x590)))+(x595)+(x594)+(((x591)*(x592)))+(((IkReal(-1.00000000000000))*(x591)*(x599))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x601=((px)*(sj0));
IkReal x602=((cj0)*(py));
IkReal x603=((IkReal(3.75430000000000))*(sj2));
IkReal x604=((IkReal(100.000000000000))*(pp)*(sj2));
IkReal x605=((IkReal(31.0000000000000))*(cj2)*(pz));
IkReal x606=((IkReal(31.0000000000000))*(cj2)*(px)*(py));
IkReal x607=((IkReal(31.0000000000000))*(cj0)*(cj2)*(sj0));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(x602)*(x603)))+(((x601)*(x603)))+(((cj0)*(px)*(x605)))+(((x602)*(x604)))+(((py)*(sj0)*(x605)))+(((IkReal(-1.00000000000000))*(x601)*(x604))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(31.0000000000000))*(cj2)*(py)*(sj0)*(x602)))+(((pz)*(x603)))+(((IkReal(-1.00000000000000))*(pz)*(x604)))+(((IkReal(-31.0000000000000))*(cj0)*(cj2)*(px)*(x601)))+(((IkReal(-31.0000000000000))*(cj2)*(py)*(sj0)*(x601)))+(((IkReal(31.0000000000000))*(cj0)*(cj2)*(px)*(x602))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(x602)*(x603)))+(((x601)*(x603)))+(((cj0)*(px)*(x605)))+(((x602)*(x604)))+(((py)*(sj0)*(x605)))+(((IkReal(-1.00000000000000))*(x601)*(x604)))))), ((gconst11)*(((((IkReal(31.0000000000000))*(cj2)*(py)*(sj0)*(x602)))+(((pz)*(x603)))+(((IkReal(-1.00000000000000))*(pz)*(x604)))+(((IkReal(-31.0000000000000))*(cj0)*(cj2)*(px)*(x601)))+(((IkReal(-31.0000000000000))*(cj2)*(py)*(sj0)*(x601)))+(((IkReal(31.0000000000000))*(cj0)*(cj2)*(px)*(x602)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x608=IKsin(j1);
IkReal x609=IKcos(j1);
IkReal x610=((px)*(sj0));
IkReal x611=((IkReal(0.00800000000000000))*(sj3));
IkReal x612=((cj0)*(py));
IkReal x613=((cj0)*(px));
IkReal x614=((IkReal(0.248000000000000))*(cj3));
IkReal x615=((IkReal(0.00800000000000000))*(cj3));
IkReal x616=((IkReal(1.00000000000000))*(pz));
IkReal x617=((IkReal(0.248000000000000))*(sj3));
IkReal x618=((py)*(sj0));
IkReal x619=((cj2)*(x609));
IkReal x620=((pz)*(x609));
IkReal x621=((cj2)*(x608));
IkReal x622=((sj2)*(x609));
IkReal x623=((IkReal(0.310000000000000))*(x608));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(0.310000000000000))*(x620)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x612)*(x623)))+(((x610)*(x623))));
evalcond[1]=((IkReal(0.155000000000000))+(((x608)*(x612)))+(((IkReal(-1.00000000000000))*(x609)*(x616)))+(((IkReal(-1.00000000000000))*(x608)*(x610)))+(((IkReal(-1.00000000000000))*(x611)))+(x614));
evalcond[2]=((((x617)*(x621)))+(((IkReal(-1.00000000000000))*(x609)*(x611)))+(((IkReal(0.155000000000000))*(x609)))+(((IkReal(-1.00000000000000))*(x616)))+(((x609)*(x614)))+(((x615)*(x621))));
evalcond[3]=((((pz)*(sj2)*(x608)))+(((cj2)*(x613)))+(((cj2)*(x618)))+(((x612)*(x622)))+(((IkReal(-1.00000000000000))*(x610)*(x622))));
evalcond[4]=((((x608)*(x614)))+(((IkReal(-1.00000000000000))*(x610)))+(((IkReal(-1.00000000000000))*(x617)*(x619)))+(((IkReal(0.155000000000000))*(x608)))+(x612)+(((IkReal(-1.00000000000000))*(x615)*(x619)))+(((IkReal(-1.00000000000000))*(x608)*(x611))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x612)*(x619)))+(x615)+(x617)+(((IkReal(-1.00000000000000))*(x616)*(x621)))+(((x610)*(x619)))+(((sj2)*(x618)))+(((sj2)*(x613))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x624=((IkReal(31.0000000000000))*(pz));
IkReal x625=((cj2)*(sj3));
IkReal x626=((cj2)*(cj3));
IkReal x627=((IkReal(24.8000000000000))*(pp));
IkReal x628=((IkReal(0.800000000000000))*(pp));
if( IKabs(((gconst10)*(((IkReal(0.581916500000000))+(((pz)*(x624)))+(((sj3)*(x628)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x627))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((x625)*(x627)))+(((cj0)*(py)*(x624)))+(((IkReal(-0.931066400000000))*(x625)))+(((IkReal(-0.0300344000000000))*(x626)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x624)))+(((x626)*(x628))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst10)*(((IkReal(0.581916500000000))+(((pz)*(x624)))+(((sj3)*(x628)))+(((IkReal(-0.0300344000000000))*(sj3)))+(((IkReal(-15.5000000000000))*(pp)))+(((IkReal(0.931066400000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x627)))))), ((gconst10)*(((((x625)*(x627)))+(((cj0)*(py)*(x624)))+(((IkReal(-0.931066400000000))*(x625)))+(((IkReal(-0.0300344000000000))*(x626)))+(((IkReal(-1.00000000000000))*(px)*(sj0)*(x624)))+(((x626)*(x628)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x629=IKsin(j1);
IkReal x630=IKcos(j1);
IkReal x631=((px)*(sj0));
IkReal x632=((IkReal(0.00800000000000000))*(sj3));
IkReal x633=((cj0)*(py));
IkReal x634=((cj0)*(px));
IkReal x635=((IkReal(0.248000000000000))*(cj3));
IkReal x636=((IkReal(0.00800000000000000))*(cj3));
IkReal x637=((IkReal(1.00000000000000))*(pz));
IkReal x638=((IkReal(0.248000000000000))*(sj3));
IkReal x639=((py)*(sj0));
IkReal x640=((cj2)*(x630));
IkReal x641=((pz)*(x630));
IkReal x642=((cj2)*(x629));
IkReal x643=((sj2)*(x630));
IkReal x644=((IkReal(0.310000000000000))*(x629));
evalcond[0]=((IkReal(0.0375430000000000))+(((IkReal(0.310000000000000))*(x641)))+(((IkReal(-1.00000000000000))*(x633)*(x644)))+(((IkReal(-1.00000000000000))*(pp)))+(((x631)*(x644))));
evalcond[1]=((IkReal(0.155000000000000))+(((IkReal(-1.00000000000000))*(x630)*(x637)))+(((x629)*(x633)))+(((IkReal(-1.00000000000000))*(x629)*(x631)))+(((IkReal(-1.00000000000000))*(x632)))+(x635));
evalcond[2]=((((x638)*(x642)))+(((IkReal(0.155000000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x630)*(x632)))+(((x636)*(x642)))+(((IkReal(-1.00000000000000))*(x637)))+(((x630)*(x635))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x631)*(x643)))+(((pz)*(sj2)*(x629)))+(((x633)*(x643)))+(((cj2)*(x634)))+(((cj2)*(x639))));
evalcond[4]=((((IkReal(0.155000000000000))*(x629)))+(((IkReal(-1.00000000000000))*(x629)*(x632)))+(((x629)*(x635)))+(x633)+(((IkReal(-1.00000000000000))*(x636)*(x640)))+(((IkReal(-1.00000000000000))*(x631)))+(((IkReal(-1.00000000000000))*(x638)*(x640))));
evalcond[5]=((((sj2)*(x634)))+(((sj2)*(x639)))+(x636)+(x638)+(((x631)*(x640)))+(((IkReal(-1.00000000000000))*(x637)*(x642)))+(((IkReal(-1.00000000000000))*(x633)*(x640))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x89=((IkReal(1.00000000000000))*(sj2));
IkReal x90=((cj1)*(sj3));
IkReal x91=((cj2)*(cj3));
IkReal x92=((sj1)*(sj2));
IkReal x93=((sj1)*(sj3));
IkReal x94=((IkReal(1.00000000000000))*(sj0));
IkReal x95=((((cj2)*(sj0)))+(((cj0)*(cj1)*(sj2))));
IkReal x96=((((cj0)*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(sj0)*(x89))));
IkReal x97=((x93)+(((cj1)*(x91))));
IkReal x98=((((sj1)*(x91)))+(((IkReal(-1.00000000000000))*(x90))));
IkReal x99=((((cj2)*(x90)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1))));
IkReal x100=((((cj2)*(x93)))+(((cj1)*(cj3))));
IkReal x101=((((cj0)*(x97)))+(((IkReal(-1.00000000000000))*(cj3)*(sj0)*(x89))));
IkReal x102=((((IkReal(-1.00000000000000))*(sj0)*(sj2)*(sj3)))+(((cj0)*(x99))));
IkReal x103=((((IkReal(-1.00000000000000))*(cj0)*(cj3)*(x89)))+(((IkReal(-1.00000000000000))*(x94)*(x97))));
IkReal x104=((((IkReal(-1.00000000000000))*(cj0)*(sj3)*(x89)))+(((IkReal(-1.00000000000000))*(x94)*(x99))));
new_r00=((((r10)*(x95)))+(((r00)*(x96)))+(((r20)*(x92))));
new_r01=((((r21)*(x92)))+(((r11)*(x95)))+(((r01)*(x96))));
new_r02=((((r12)*(x95)))+(((r02)*(x96)))+(((r22)*(x92))));
new_r10=((((r10)*(x101)))+(((r20)*(x98)))+(((r00)*(x103))));
new_r11=((((r21)*(x98)))+(((r01)*(x103)))+(((r11)*(x101))));
new_r12=((((r02)*(x103)))+(((r12)*(x101)))+(((r22)*(x98))));
new_r20=((((r10)*(x102)))+(((r20)*(x100)))+(((r00)*(x104))));
new_r21=((((r21)*(x100)))+(((r01)*(x104)))+(((r11)*(x102))));
new_r22=((((r02)*(x104)))+(((r22)*(x100)))+(((r12)*(x102))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((new_r01)*(new_r02)*(sj5)))+(((new_r11)*(new_r12)*(sj5)))));
dummyeval[0]=((((new_r01)*(new_r02)*(sj5)))+(((new_r11)*(new_r12)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x105=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x105;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x105;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x106=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x106));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x106))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x107=IKsin(j6);
IkReal x108=((IkReal(1.00000000000000))*(sj4));
IkReal x109=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x107));
evalcond[1]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x109))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x108)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x107))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x108)))+(((IkReal(-1.00000000000000))*(x109))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x110=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x110));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x110))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x111=IKsin(j6);
IkReal x112=IKcos(j6);
IkReal x113=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x111));
evalcond[1]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x112))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x113)))+(((cj4)*(new_r10)))+(x111));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x113)))+(((cj4)*(new_r11)))+(x112));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x114=((cj5)*(gconst17)*(new_r21));
if( IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x114))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x114))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r02)*(x114)), ((new_r12)*(x114)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x115=IKcos(j4);
IkReal x116=IKsin(j4);
IkReal x117=((IkReal(1.00000000000000))*(sj5));
IkReal x118=((new_r02)*(x116));
IkReal x119=((new_r12)*(x115));
IkReal x120=((sj5)*(x116));
evalcond[0]=((((new_r02)*(x115)))+(((new_r12)*(x116))));
evalcond[1]=((sj5)+(x119)+(((IkReal(-1.00000000000000))*(x118))));
evalcond[2]=((((new_r00)*(x120)))+(((cj5)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x115)*(x117))));
evalcond[3]=((((new_r01)*(x120)))+(((cj5)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x115)*(x117))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x117)*(x119)))+(((sj5)*(x118)))+(((cj5)*(new_r22))));
evalcond[5]=((((cj5)*(x118)))+(((IkReal(-1.00000000000000))*(new_r22)*(x117)))+(((IkReal(-1.00000000000000))*(cj5)*(x119))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x121=((IkReal(-1.00000000000000))+(new_r22));
IkReal x122=((new_r02)*(sj4));
IkReal x123=((cj4)*(new_r12));
IkReal x124=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x121;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x124;
evalcond[5]=x124;
evalcond[6]=((x123)+(((IkReal(-1.00000000000000))*(x122))));
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x121;
evalcond[10]=((x122)+(((IkReal(-1.00000000000000))*(x123))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x125=IKsin(j6);
IkReal x126=((IkReal(1.00000000000000))*(sj4));
IkReal x127=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x125));
evalcond[1]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x127))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x126)))+(((IkReal(-1.00000000000000))*(x125))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x126)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x127))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x128=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
IkReal x129=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x128;
evalcond[5]=x128;
evalcond[6]=x129;
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=x129;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x130=IKsin(j6);
IkReal x131=IKcos(j6);
IkReal x132=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x130));
evalcond[1]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x132)))+(x130));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x132)))+(((cj4)*(new_r11)))+(x131));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x133=IKsin(j6);
IkReal x134=IKcos(j6);
IkReal x135=((IkReal(1.00000000000000))*(sj5));
IkReal x136=((cj5)*(sj4));
IkReal x137=((IkReal(1.00000000000000))*(cj5));
IkReal x138=((IkReal(1.00000000000000))*(sj4));
IkReal x139=((cj4)*(new_r11));
IkReal x140=((cj4)*(new_r10));
IkReal x141=((IkReal(1.00000000000000))*(x134));
evalcond[0]=((((IkReal(-1.00000000000000))*(x133)*(x135)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x134)*(x135)))+(new_r21));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x133));
evalcond[3]=((((IkReal(-1.00000000000000))*(x141)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x138)))+(((IkReal(-1.00000000000000))*(x133)*(x137)))+(x140));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r01)*(x138)))+(((IkReal(-1.00000000000000))*(x134)*(x137)))+(x139));
evalcond[6]=((((IkReal(-1.00000000000000))*(x137)*(x140)))+(((new_r00)*(x136)))+(x133)+(((IkReal(-1.00000000000000))*(new_r20)*(x135))));
evalcond[7]=((((new_r01)*(x136)))+(((IkReal(-1.00000000000000))*(x137)*(x139)))+(x134)+(((IkReal(-1.00000000000000))*(new_r21)*(x135))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x142=IKsin(j6);
IkReal x143=IKcos(j6);
IkReal x144=((IkReal(1.00000000000000))*(sj5));
IkReal x145=((cj5)*(sj4));
IkReal x146=((IkReal(1.00000000000000))*(cj5));
IkReal x147=((IkReal(1.00000000000000))*(sj4));
IkReal x148=((cj4)*(new_r11));
IkReal x149=((cj4)*(new_r10));
IkReal x150=((IkReal(1.00000000000000))*(x143));
evalcond[0]=((((IkReal(-1.00000000000000))*(x142)*(x144)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x143)*(x144)))+(new_r21));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x142));
evalcond[3]=((((IkReal(-1.00000000000000))*(x150)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x142)*(x146)))+(x149)+(((IkReal(-1.00000000000000))*(new_r00)*(x147))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r01)*(x147)))+(((IkReal(-1.00000000000000))*(x143)*(x146)))+(x148));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x144)))+(((new_r00)*(x145)))+(x142)+(((IkReal(-1.00000000000000))*(x146)*(x149))));
evalcond[7]=((((new_r01)*(x145)))+(((IkReal(-1.00000000000000))*(new_r21)*(x144)))+(x143)+(((IkReal(-1.00000000000000))*(x146)*(x148))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst19)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst19)*(new_r20)), ((gconst19)*(new_r21)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x151=IKsin(j6);
IkReal x152=IKcos(j6);
IkReal x153=((IkReal(1.00000000000000))*(sj5));
IkReal x154=((cj5)*(sj4));
IkReal x155=((IkReal(1.00000000000000))*(cj5));
IkReal x156=((IkReal(1.00000000000000))*(sj4));
IkReal x157=((cj4)*(new_r11));
IkReal x158=((cj4)*(new_r10));
IkReal x159=((IkReal(1.00000000000000))*(x152));
evalcond[0]=((((IkReal(-1.00000000000000))*(x151)*(x153)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x152)*(x153)))+(new_r21));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x151));
evalcond[3]=((((IkReal(-1.00000000000000))*(x159)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x151)*(x155)))+(x158)+(((IkReal(-1.00000000000000))*(new_r00)*(x156))));
evalcond[5]=((x157)+(((IkReal(-1.00000000000000))*(x152)*(x155)))+(((IkReal(-1.00000000000000))*(new_r01)*(x156))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x153)))+(((new_r00)*(x154)))+(x151)+(((IkReal(-1.00000000000000))*(x155)*(x158))));
evalcond[7]=((((new_r01)*(x154)))+(((IkReal(-1.00000000000000))*(new_r21)*(x153)))+(x152)+(((IkReal(-1.00000000000000))*(x155)*(x157))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x160=((gconst16)*(sj5));
if( IKabs(((new_r02)*(x160))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x160))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r02)*(x160)), ((IkReal(-1.00000000000000))*(new_r12)*(x160)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x161=IKcos(j4);
IkReal x162=IKsin(j4);
IkReal x163=((IkReal(1.00000000000000))*(sj5));
IkReal x164=((new_r02)*(x162));
IkReal x165=((new_r12)*(x161));
IkReal x166=((sj5)*(x162));
evalcond[0]=((((new_r12)*(x162)))+(((new_r02)*(x161))));
evalcond[1]=((sj5)+(x165)+(((IkReal(-1.00000000000000))*(x164))));
evalcond[2]=((((new_r00)*(x166)))+(((cj5)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x161)*(x163))));
evalcond[3]=((((new_r01)*(x166)))+(((IkReal(-1.00000000000000))*(new_r11)*(x161)*(x163)))+(((cj5)*(new_r21))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x163)*(x165)))+(((cj5)*(new_r22)))+(((sj5)*(x164))));
evalcond[5]=((((cj5)*(x164)))+(((IkReal(-1.00000000000000))*(cj5)*(x165)))+(((IkReal(-1.00000000000000))*(new_r22)*(x163))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x167=((IkReal(-1.00000000000000))+(new_r22));
IkReal x168=((new_r02)*(sj4));
IkReal x169=((cj4)*(new_r12));
IkReal x170=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x167;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x170;
evalcond[5]=x170;
evalcond[6]=((x169)+(((IkReal(-1.00000000000000))*(x168))));
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x167;
evalcond[10]=((x168)+(((IkReal(-1.00000000000000))*(x169))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x171=IKsin(j6);
IkReal x172=((IkReal(1.00000000000000))*(sj4));
IkReal x173=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x171));
evalcond[1]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x173))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r00)*(x172))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x173)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x172))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x174=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
IkReal x175=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x174;
evalcond[5]=x174;
evalcond[6]=x175;
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=x175;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x176=IKsin(j6);
IkReal x177=IKcos(j6);
IkReal x178=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x176));
evalcond[1]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x177))));
evalcond[2]=((((cj4)*(new_r10)))+(x176)+(((IkReal(-1.00000000000000))*(new_r00)*(x178))));
evalcond[3]=((((cj4)*(new_r11)))+(x177)+(((IkReal(-1.00000000000000))*(new_r01)*(x178))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x179=IKsin(j6);
IkReal x180=IKcos(j6);
IkReal x181=((IkReal(1.00000000000000))*(sj5));
IkReal x182=((cj5)*(sj4));
IkReal x183=((IkReal(1.00000000000000))*(cj5));
IkReal x184=((IkReal(1.00000000000000))*(sj4));
IkReal x185=((cj4)*(new_r11));
IkReal x186=((cj4)*(new_r10));
IkReal x187=((IkReal(1.00000000000000))*(x180));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x179)*(x181))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x180)*(x181)))+(new_r21));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x179));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x187))));
evalcond[4]=((x186)+(((IkReal(-1.00000000000000))*(x179)*(x183)))+(((IkReal(-1.00000000000000))*(new_r00)*(x184))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x180)*(x183)))+(x185)+(((IkReal(-1.00000000000000))*(new_r01)*(x184))));
evalcond[6]=((((new_r00)*(x182)))+(x179)+(((IkReal(-1.00000000000000))*(new_r20)*(x181)))+(((IkReal(-1.00000000000000))*(x183)*(x186))));
evalcond[7]=((((new_r01)*(x182)))+(((IkReal(-1.00000000000000))*(new_r21)*(x181)))+(x180)+(((IkReal(-1.00000000000000))*(x183)*(x185))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x188=IKsin(j6);
IkReal x189=IKcos(j6);
IkReal x190=((IkReal(1.00000000000000))*(sj5));
IkReal x191=((cj5)*(sj4));
IkReal x192=((IkReal(1.00000000000000))*(cj5));
IkReal x193=((IkReal(1.00000000000000))*(sj4));
IkReal x194=((cj4)*(new_r11));
IkReal x195=((cj4)*(new_r10));
IkReal x196=((IkReal(1.00000000000000))*(x189));
evalcond[0]=((((IkReal(-1.00000000000000))*(x188)*(x190)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x189)*(x190)))+(new_r21));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x188));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x196))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x188)*(x192)))+(x195)+(((IkReal(-1.00000000000000))*(new_r00)*(x193))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x189)*(x192)))+(x194)+(((IkReal(-1.00000000000000))*(new_r01)*(x193))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x192)*(x195)))+(((new_r00)*(x191)))+(((IkReal(-1.00000000000000))*(new_r20)*(x190)))+(x188));
evalcond[7]=((((new_r01)*(x191)))+(((IkReal(-1.00000000000000))*(x192)*(x194)))+(((IkReal(-1.00000000000000))*(new_r21)*(x190)))+(x189));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst19)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst19)*(new_r20)), ((gconst19)*(new_r21)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x197=IKsin(j6);
IkReal x198=IKcos(j6);
IkReal x199=((IkReal(1.00000000000000))*(sj5));
IkReal x200=((cj5)*(sj4));
IkReal x201=((IkReal(1.00000000000000))*(cj5));
IkReal x202=((IkReal(1.00000000000000))*(sj4));
IkReal x203=((cj4)*(new_r11));
IkReal x204=((cj4)*(new_r10));
IkReal x205=((IkReal(1.00000000000000))*(x198));
evalcond[0]=((((IkReal(-1.00000000000000))*(x197)*(x199)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x198)*(x199)))+(new_r21));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x197));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x202)))+(((IkReal(-1.00000000000000))*(x197)*(x201)))+(x204));
evalcond[5]=((x203)+(((IkReal(-1.00000000000000))*(x198)*(x201)))+(((IkReal(-1.00000000000000))*(new_r01)*(x202))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x201)*(x204)))+(((new_r00)*(x200)))+(((IkReal(-1.00000000000000))*(new_r20)*(x199)))+(x197));
evalcond[7]=((((IkReal(-1.00000000000000))*(x201)*(x203)))+(((new_r01)*(x200)))+(((IkReal(-1.00000000000000))*(new_r21)*(x199)))+(x198));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst18)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst18)*(new_r20)), ((gconst18)*(new_r21)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x206=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((((IkReal(-1.00000000000000))*(x206)*(IKsin(j6))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x206)*(IKcos(j6))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x207=((gconst20)*(sj6));
if( IKabs(((new_r02)*(x207))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x207))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r02)*(x207)), ((IkReal(-1.00000000000000))*(new_r12)*(x207)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x208=IKcos(j4);
IkReal x209=IKsin(j4);
IkReal x210=((IkReal(1.00000000000000))*(cj6));
IkReal x211=((IkReal(1.00000000000000))*(sj5));
IkReal x212=((IkReal(1.00000000000000))*(cj5));
IkReal x213=((new_r10)*(x208));
IkReal x214=((new_r01)*(x209));
IkReal x215=((new_r12)*(x208));
IkReal x216=((new_r00)*(x209));
IkReal x217=((new_r02)*(x209));
IkReal x218=((new_r11)*(x208));
IkReal x219=((x208)*(x212));
evalcond[0]=((((new_r02)*(x208)))+(((new_r12)*(x209))));
evalcond[1]=((sj6)+(((new_r11)*(x209)))+(((new_r01)*(x208))));
evalcond[2]=((sj5)+(x215)+(((IkReal(-1.00000000000000))*(x217))));
evalcond[3]=((((new_r10)*(x209)))+(((new_r00)*(x208)))+(((IkReal(-1.00000000000000))*(x210))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)*(x212)))+(x213)+(((IkReal(-1.00000000000000))*(x216))));
evalcond[5]=((x218)+(((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(cj5)*(x210))));
evalcond[6]=((((sj5)*(x216)))+(((cj5)*(new_r20)))+(((IkReal(-1.00000000000000))*(x211)*(x213))));
evalcond[7]=((((sj5)*(x214)))+(((cj5)*(new_r21)))+(((IkReal(-1.00000000000000))*(x211)*(x218))));
evalcond[8]=((IkReal(-1.00000000000000))+(((sj5)*(x217)))+(((cj5)*(new_r22)))+(((IkReal(-1.00000000000000))*(x211)*(x215))));
evalcond[9]=((((cj5)*(x217)))+(((IkReal(-1.00000000000000))*(new_r22)*(x211)))+(((IkReal(-1.00000000000000))*(x212)*(x215))));
evalcond[10]=((sj6)+(((cj5)*(x216)))+(((IkReal(-1.00000000000000))*(new_r20)*(x211)))+(((IkReal(-1.00000000000000))*(x212)*(x213))));
evalcond[11]=((cj6)+(((cj5)*(x214)))+(((IkReal(-1.00000000000000))*(new_r21)*(x211)))+(((IkReal(-1.00000000000000))*(x212)*(x218))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x220=((gconst21)*(sj5));
if( IKabs(((new_r02)*(x220))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x220))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r02)*(x220)), ((IkReal(-1.00000000000000))*(new_r12)*(x220)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x221=IKcos(j4);
IkReal x222=IKsin(j4);
IkReal x223=((IkReal(1.00000000000000))*(cj6));
IkReal x224=((IkReal(1.00000000000000))*(sj5));
IkReal x225=((IkReal(1.00000000000000))*(cj5));
IkReal x226=((new_r10)*(x221));
IkReal x227=((new_r01)*(x222));
IkReal x228=((new_r12)*(x221));
IkReal x229=((new_r00)*(x222));
IkReal x230=((new_r02)*(x222));
IkReal x231=((new_r11)*(x221));
IkReal x232=((x221)*(x225));
evalcond[0]=((((new_r02)*(x221)))+(((new_r12)*(x222))));
evalcond[1]=((sj6)+(((new_r01)*(x221)))+(((new_r11)*(x222))));
evalcond[2]=((sj5)+(x228)+(((IkReal(-1.00000000000000))*(x230))));
evalcond[3]=((((new_r00)*(x221)))+(((new_r10)*(x222)))+(((IkReal(-1.00000000000000))*(x223))));
evalcond[4]=((x226)+(((IkReal(-1.00000000000000))*(sj6)*(x225)))+(((IkReal(-1.00000000000000))*(x229))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x223)))+(x231)+(((IkReal(-1.00000000000000))*(x227))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x224)*(x226)))+(((cj5)*(new_r20)))+(((sj5)*(x229))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x224)*(x231)))+(((cj5)*(new_r21)))+(((sj5)*(x227))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x224)*(x228)))+(((cj5)*(new_r22)))+(((sj5)*(x230))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x225)*(x228)))+(((cj5)*(x230)))+(((IkReal(-1.00000000000000))*(new_r22)*(x224))));
evalcond[10]=((sj6)+(((IkReal(-1.00000000000000))*(x225)*(x226)))+(((cj5)*(x229)))+(((IkReal(-1.00000000000000))*(new_r20)*(x224))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x225)*(x231)))+(cj6)+(((cj5)*(x227)))+(((IkReal(-1.00000000000000))*(new_r21)*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - lmtclam (ad5fdef5494dcab58e5dfca6fb02dcee)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
